security:

    encoders:
                App\Entity\User:
                    algorithm: bcrypt
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        user_db_provider:
                    entity:
                        class: App\Entity\User
                        property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin_login:
            anonymous: ~
            form_login:
                        login_path: login_admin
                        check_path: login_admin
                        default_target_path: admin_main
            logout:
                        path: /logout
                        target: login_admin
        api_login:
                        pattern:  ^/api/login
                        stateless: true
                        anonymous: true
                        provider: user_db_provider
                        json_login:
                            check_path: /api/login
                            username_path: email
                            password_path: password
                            success_handler: lexik_jwt_authentication.handler.authentication_success
                            failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
                            pattern:   ^/api/
                            stateless: true
                            guard:
                                authenticators:
                                    - lexik_jwt_authentication.jwt_token_authenticator

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login/admin, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/user/locate, roles: [ ROLE_USER ], methods: [POST] }
        - { path: ^/api/positions, roles: [ ROLE_ADMIN ], methods: [POST] }
        - { path: ^/api, roles: [ ROLE_ADMIN ], methods: [GET, POST, DELETE, PUT] }
        - { path: ^/api, roles: [ ROLE_USER ], methods: [GET] }
        - { path: ^/admin, roles: [ ROLE_ADMIN ] }
